Get_Pwnam_alloc: struct passwd *(TALLOC_CTX *, const char *)
HIVE_INFO: 0xXXXX, 0xXXXX, 0xXXXX, 0xXXXX, 0xXXXX, 0xXXXX, 0xXXXX, 0xXXXX, 0xXXXX, 0xXXXX
HIVE_INFO_HKCC: handle = 2147483653, short_name = 0xXXXX "HKCC", short_name_len = 4, long_name = 0xXXXX "HKEY_CURRENT_CONFIG", long_name_len = 19
HIVE_INFO_HKCR: handle = 2147483648, short_name = 0xXXXX "HKCR", short_name_len = 4, long_name = 0xXXXX "HKEY_CLASSES_ROOT", long_name_len = 17
HIVE_INFO_HKCU: handle = 2147483649, short_name = 0xXXXX "HKCU", short_name_len = 4, long_name = 0xXXXX "HKEY_CURRENT_USER", long_name_len = 17
HIVE_INFO_HKDD: handle = 2147483654, short_name = 0xXXXX "HKDD", short_name_len = 4, long_name = 0xXXXX "HKEY_DYN_DATA", long_name_len = 13
HIVE_INFO_HKLM: handle = 2147483650, short_name = 0xXXXX "HKLM", short_name_len = 4, long_name = 0xXXXX "HKEY_LOCAL_MACHINE", long_name_len = 18
HIVE_INFO_HKPD: handle = 2147483652, short_name = 0xXXXX "HKPD", short_name_len = 4, long_name = 0xXXXX "HKEY_PERFORMANCE_DATA", long_name_len = 21
HIVE_INFO_HKPN: handle = 2147483744, short_name = 0xXXXX "HKPN", short_name_len = 4, long_name = 0xXXXX "HKEY_PERFORMANCE_NLSTEXT", long_name_len = 24
HIVE_INFO_HKPT: handle = 2147483728, short_name = 0xXXXX "HKPT", short_name_len = 4, long_name = 0xXXXX "HKEY_PERFORMANCE_TEXT", long_name_len = 21
HIVE_INFO_HKU: handle = 2147483651, short_name = 0xXXXX "HKU", short_name_len = 3, long_name = 0xXXXX "HKEY_USERS", long_name_len = 10
PDB_secrets_clear_domain_protection: bool (const char *)
PDB_secrets_fetch_domain_guid: bool (const char *, struct GUID *)
PDB_secrets_fetch_domain_sid: bool (const char *, struct dom_sid *)
PDB_secrets_mark_domain_protected: bool (const char *)
PDB_secrets_store_domain_guid: bool (const char *, struct GUID *)
PDB_secrets_store_domain_sid: bool (const char *, const struct dom_sid *)
TimeInit: void (void)
__addsf3: <text variable, no debug info>
__aeabi_d2uiz: <text variable, no debug info>
__aeabi_d2ulz: <text variable, no debug info>
__aeabi_ddiv: <text variable, no debug info>
__aeabi_dmul: <text variable, no debug info>
__aeabi_fadd: <text variable, no debug info>
__aeabi_frsub: <text variable, no debug info>
__aeabi_fsub: <text variable, no debug info>
__aeabi_i2f: <text variable, no debug info>
__aeabi_l2f: <text variable, no debug info>
__aeabi_ui2f: <text variable, no debug info>
__aeabi_ul2f: <text variable, no debug info>
__divdf3: <text variable, no debug info>
__fixunsdfdi: UDItype (DFtype)
__fixunsdfsi: <text variable, no debug info>
__floatdisf: <text variable, no debug info>
__floatsisf: <text variable, no debug info>
__floatundisf: <text variable, no debug info>
__floatunsisf: <text variable, no debug info>
__muldf3: <text variable, no debug info>
__subsf3: <text variable, no debug info>
account_policy_get: bool (enum pdb_policy_type, uint32_t *)
account_policy_get_default: bool (enum pdb_policy_type, uint32_t *)
account_policy_get_desc: const char *(enum pdb_policy_type)
account_policy_name_to_typenum: enum pdb_policy_type (const char *)
account_policy_names_list: void (TALLOC_CTX *, const char ***, int *)
account_policy_set: bool (enum pdb_policy_type, uint32_t)
add_initial_entry: NTSTATUS (gid_t, const char *, enum lsa_SidType, const char *, const char *)
add_to_large_array: void (TALLOC_CTX *, size_t, void *, void *, uint32_t *, ssize_t *)
addrchange_context_create: NTSTATUS (TALLOC_CTX *, struct addrchange_context **)
addrchange_recv: NTSTATUS (struct tevent_req *, enum addrchange_type *, struct __kernel_sockaddr_storage *)
addrchange_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct addrchange_context *)
algorithmic_pdb_gid_to_group_rid: uint32_t (gid_t)
algorithmic_pdb_rid_is_user: bool (uint32_t)
algorithmic_pdb_uid_to_user_rid: uint32_t (uid_t)
algorithmic_pdb_user_rid_to_uid: uid_t (uint32_t)
algorithmic_rid_base: int (void)
allow_access: bool (const char **, const char **, const char *, const char *)
any_nt_status_not_ok: bool (NTSTATUS, NTSTATUS, NTSTATUS *)
asserted_identity_domain_name: const char *(void)
audit_category_str: const char *(uint32_t)
audit_description_str: const char *(uint32_t)
audit_param_str: const char *(uint32_t)
audit_policy_str: const char *(TALLOC_CTX *, uint32_t)
bLoaded: $38 = false
background_job_recv: NTSTATUS (struct tevent_req *)
background_job_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct messaging_context *, uint32_t *, size_t, time_t, int (*)(void *), void *)
builtin_domain_name: const char *(void)
cache_account_policy_get: bool (enum pdb_policy_type, uint32_t *)
cache_account_policy_set: bool (enum pdb_policy_type, uint32_t)
cache_path: char *(const char *)
canonicalize_servicename: char *(TALLOC_CTX *, const char *)
cbuf_clear: cbuf *(cbuf *)
cbuf_copy: cbuf *(const cbuf *)
cbuf_delete: void (cbuf *)
cbuf_getpos: size_t (const cbuf *)
cbuf_gets: char *(cbuf *, size_t)
cbuf_new: cbuf *(const void *)
cbuf_print_quoted: int (cbuf *, const char *, size_t)
cbuf_print_quoted_string: int (cbuf *, const char *)
cbuf_printf: int (cbuf *, const char *, ...)
cbuf_putc: int (cbuf *, char)
cbuf_putdw: int (cbuf *, uint32_t)
cbuf_puts: int (cbuf *, const char *, size_t)
cbuf_puts_case: int (cbuf *, const char *, size_t, enum fmt_case)
cbuf_reserve: char *(cbuf *, size_t)
cbuf_resize: cbuf *(cbuf *, size_t)
cbuf_setpos: void (cbuf *, size_t)
cbuf_swap: void (cbuf *, cbuf *)
cbuf_swapptr: cbuf *(cbuf *, char **, size_t)
cbuf_takeover: cbuf *(cbuf *, cbuf *)
check_same_dev_ino: bool (const SMB_STRUCT_STAT *, const SMB_STRUCT_STAT *)
check_same_stat: bool (const SMB_STRUCT_STAT *, const SMB_STRUCT_STAT *)
clean_name: char *(TALLOC_CTX *, const char *)
cleanupdb_delete_child: bool (const pid_t)
cleanupdb_store_child: bool (const pid_t, const bool)
cleanupdb_traverse_read: int (int (*)(const pid_t, const bool, void *), void *)
client_addr: const char *(int, char *, size_t)
client_match: bool (const char *, const void *)
cluster_probe_ok: bool (void)
cluster_support_available: bool (void)
cluster_support_features: const char *(void)
convert_time_t_to_uint32_t: uint32_t (time_t)
convert_uint32_t_to_time_t: time_t (uint32_t)
copy_unix_token: struct security_unix_token *(TALLOC_CTX *, const struct security_unix_token *)
create_builtin_administrators: NTSTATUS (const struct dom_sid *)
create_builtin_users: NTSTATUS (const struct dom_sid *)
create_pipe_sock: int (const char *, const char *, mode_t)
create_reg_subkey: WERROR (struct registry_key_handle *, const char *)
ctdbd_messaging_send_iov: int (struct ctdbd_connection *, uint32_t, uint64_t, const struct iovec *, int)
ctdbd_probe: int (const char *, int)
ctdbd_process_exists: bool (struct ctdbd_connection *, uint32_t, pid_t)
ctdbd_register_ips: int (struct ctdbd_connection *, const struct __kernel_sockaddr_storage *, const struct __kernel_sockaddr_storage *, int (*)(uint32_t, uint32_t, uint64_t, const uint8_t *, size_t, void *), void *)
current_user: conn = 0xXXXX, vuid = 0, ut = {uid = 0, gid = 0, ngroups = 0, groups = 0xXXXX}, nt_user_token = 0xXXXX
current_user_info: smb_name = '\000' <repeats 255 times>, unix_name = '\000' <repeats 255 times>, domain = '\000' <repeats 255 times>
db_is_local: bool (const char *)
db_open: struct db_context *(TALLOC_CTX *, const char *, int, int, int, mode_t, enum dbwrap_lock_order, uint64_t)
db_open_ctdb: struct db_context *(TALLOC_CTX *, struct messaging_context *, struct ctdbd_connection *, const char *, int, int, int, mode_t, enum dbwrap_lock_order, uint64_t)
db_open_watched: struct db_context *(TALLOC_CTX *, struct db_context *, struct messaging_context *)
dbwrap_watched_watch_recv: NTSTATUS (struct tevent_req *, TALLOC_CTX *, struct db_record **, bool *, struct server_id *)
dbwrap_watched_watch_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct db_record *, struct server_id)
debug_message: void (struct messaging_context *, void *, uint32_t, struct server_id, DATA_BLOB *)
debug_register_msgs: void (struct messaging_context *)
decode_account_policy_name: const char *(enum pdb_policy_type)
delete_reg_subkey: WERROR (struct registry_key_handle *, const char *, bool)
delete_share_security: bool (const char *)
dir_check_ftype: bool (uint32_t, uint32_t)
display_time: const char *(NTTIME)
dos_filetime_timespec: void (struct timespec *)
dos_to_ntstatus: NTSTATUS (uint8_t, uint32_t)
drain_socket: ssize_t (int, size_t)
drop_effective_capability: void (enum smbd_capability)
dump_a_parameter: bool (int, char *, FILE *, bool)
dump_core: void (void)
dump_core_setup: void (const char *, const char *)
dup_nt_token: struct security_token *(TALLOC_CTX *, const struct security_token *)
endpwent: void (void)
escape_ldap_string: char *(TALLOC_CTX *, const char *)
escape_rdn_val_string_alloc: char *(const char *)
event_add_idle: struct idle_event *(struct tevent_context *, TALLOC_CTX *, struct timeval, const char *, bool (*)(const struct timeval *, void *), void *)
fcntl_getlock: bool (int, int, off_t *, off_t *, int *, pid_t *)
fetch_ldap_pw: bool (char **, char **)
fetch_reg_keys: int (struct registry_key_handle *, struct regsubkey_ctr *)
fetch_reg_values: int (struct registry_key_handle *, struct regval_ctr *)
file_exist_stat: bool (const char *, SMB_STRUCT_STAT *, bool)
file_lines_pload: char **(TALLOC_CTX *, const char *, int *)
file_pload_recv: int (struct tevent_req *, TALLOC_CTX *, uint8_t **)
file_pload_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, const char *, size_t)
first_ipv4_iface: const struct in_addr *(void)
flush_pwnam_cache: void (void)
fncall_context_init: struct fncall_context *(TALLOC_CTX *, int)
fncall_recv: int (struct tevent_req *, int *)
fncall_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct fncall_context *, void (*)(void *), void *)
free_local_machine_name: void (void)
fstring_sub: void (char *, const char *, const char *)
g_lock_ctx_init: struct g_lock_ctx *(TALLOC_CTX *, struct messaging_context *)
g_lock_do: NTSTATUS (const char *, enum g_lock_type, struct timeval, void (*)(void *), void *)
g_lock_dump: NTSTATUS (struct g_lock_ctx *, const char *, int (*)(struct server_id, enum g_lock_type, void *), void *)
g_lock_get: NTSTATUS (struct g_lock_ctx *, const char *, struct server_id *)
g_lock_lock: NTSTATUS (struct g_lock_ctx *, const char *, enum g_lock_type, struct timeval)
g_lock_lock_recv: NTSTATUS (struct tevent_req *)
g_lock_lock_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct g_lock_ctx *, const char *, enum g_lock_type)
g_lock_locks: int (struct g_lock_ctx *, int (*)(const char *, void *), void *)
g_lock_unlock: NTSTATUS (struct g_lock_ctx *, const char *)
g_root_passwd: $218 = (struct passwd *) 0xXXXX
gencache_del: bool (const char *)
gencache_get: bool (const char *, TALLOC_CTX *, char **, time_t *)
gencache_get_data_blob: bool (const char *, TALLOC_CTX *, DATA_BLOB *, time_t *, bool *)
gencache_iterate: void (void (*)(const char *, const char *, time_t, void *), void *, const char *)
gencache_iterate_blobs: void (void (*)(const char *, DATA_BLOB, time_t, void *), void *, const char *)
gencache_parse: bool (const char *, void (*)(time_t, DATA_BLOB, void *), void *)
gencache_set: bool (const char *, const char *, time_t)
gencache_set_data_blob: bool (const char *, const DATA_BLOB *, time_t)
gencache_stabilize: bool (void)
generalized_to_unix_time: time_t (const char *)
get_Protocol: enum protocol_types (void)
get_account_pol_db: struct db_context *(void)
get_account_policy_attr: const char *(enum pdb_policy_type)
get_audit_category_from_param: bool (const char *, uint32_t *)
get_charset: const char *(const char *)
get_current_username: const char *(void)
get_default_sec_channel: enum netr_SchannelType (void)
get_domain_group_from_sid: bool (struct dom_sid, GROUP_MAP *)
get_dos_error_msg: const char *(WERROR)
get_file_size_stat: uint64_t (const SMB_STRUCT_STAT *)
get_flags: unsigned int *(void)
get_global_sam_name: const char *(void)
get_global_sam_sid: struct dom_sid *(void)
get_globals: struct loadparm_global *(void)
get_int_param: uint32_t (const char *)
get_interface: struct interface *(int)
get_local_machine_name: const char *(void)
get_my_vnn: uint32_t (void)
get_mydnsdomname: char *(TALLOC_CTX *)
get_mydnsfullname: const char *(void)
get_peer_addr: const char *(int, char *, size_t)
get_primary_group_sid: NTSTATUS (TALLOC_CTX *, const char *, struct passwd **, struct dom_sid **)
get_privileges_for_sid_as_set: NTSTATUS (TALLOC_CTX *, PRIVILEGE_SET **, struct dom_sid *)
get_privileges_for_sids: bool (uint64_t *, struct dom_sid *, int)
get_process_uptime: void (struct timeval *)
get_remote_arch: enum remote_arch_types (void)
get_remote_arch_from_str: enum remote_arch_types (const char *)
get_remote_arch_str: const char *(void)
get_remote_hostname: int (const struct tsocket_address *, char **, TALLOC_CTX *)
get_remote_machine_name: const char *(void)
get_safe_IVAL: int (const char *, size_t, char *, size_t, int)
get_safe_SVAL: int (const char *, size_t, char *, size_t, int)
get_safe_ptr: char *(const char *, size_t, char *, size_t)
get_safe_str_ptr: char *(const char *, size_t, char *, size_t)
get_server_zone_offset: int (void)
get_share_security: struct security_descriptor *(TALLOC_CTX *, const char *, size_t *)
get_share_security_default: struct security_descriptor *(TALLOC_CTX *, size_t *, uint32_t)
get_startup_time: void (struct timeval *)
get_string_param: char *(const char *)
get_trust_pw_clear: bool (const char *, char **, const char **, enum netr_SchannelType *)
get_trust_pw_hash: bool (const char *, uint8_t *, const char **, enum netr_SchannelType *)
get_user_home_dir: char *(TALLOC_CTX *, const char *)
getaddrinfo_recv: int (struct tevent_req *, struct addrinfo **)
getaddrinfo_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct fncall_context *, const char *, const char *, const struct addrinfo *)
getgroups_unix_user: bool (TALLOC_CTX *, const char *, gid_t, gid_t **, uint32_t *)
getpasswd_wrapper: struct passwd *()
getpasswd_wrapper_impl: struct passwd *(const char *)
getpwent: struct passwd *(void)
getpwnam: struct passwd *(const char *)
getpwnam_alloc: struct passwd *(TALLOC_CTX *, const char *)
getpwuid: struct passwd *(uid_t)
getpwuid_alloc: struct passwd *(TALLOC_CTX *, uid_t)
getservicebyname: int (const char *, struct loadparm_service *)
gfree_all: void (void)
gfree_interfaces: void (void)
gfree_loadparm: void (void)
gfree_names: void (void)
gid_to_sid: void (struct dom_sid *, gid_t)
gid_to_unix_groups_sid: void (gid_t, struct dom_sid *)
gidtoname: char *(gid_t)
grab_named_mutex: struct named_mutex *(TALLOC_CTX *, const char *, int)
grant_all_privileges: bool (const struct dom_sid *)
grant_privilege_by_name: bool (const struct dom_sid *, const char *)
grant_privilege_set: bool (const struct dom_sid *, struct lsa_PrivilegeSet *)
groupdb_tdb_init: const struct mapping_backend *(void)
groups_max: int (void)
hive_info: const struct hive_info *(const char *)
iconvert_talloc: size_t (const void *, smb_iconv_t, const char *, size_t, char **)
id_cache_delete_from_cache: void (const struct id_cache_ref *)
id_cache_delete_message: void (struct messaging_context *, void *, uint32_t, struct server_id, DATA_BLOB *)
id_cache_ref_parse: bool (const char *, struct id_cache_ref *)
id_cache_register_msgs: void (struct messaging_context *)
idmap_cache_del_gid: bool (gid_t)
idmap_cache_del_sid: bool (const struct dom_sid *)
idmap_cache_del_uid: bool (uid_t)
idmap_cache_find_gid2sid: bool (gid_t, struct dom_sid *, bool *)
idmap_cache_find_sid2gid: bool (const struct dom_sid *, gid_t *, bool *)
idmap_cache_find_sid2uid: bool (const struct dom_sid *, uid_t *, bool *)
idmap_cache_find_sid2unixid: bool (const struct dom_sid *, struct unixid *, bool *)
idmap_cache_find_uid2sid: bool (uid_t, struct dom_sid *, bool *)
idmap_cache_set_sid2unixid: void (const struct dom_sid *, struct unixid *)
iface_count: int (void)
iface_count_v4_nl: int (void)
iface_ip: const struct __kernel_sockaddr_storage *(const struct sockaddr *)
iface_local: bool (const struct sockaddr *)
iface_n_bcast: const struct __kernel_sockaddr_storage *(int)
iface_n_bcast_v4: const struct in_addr *(int)
iface_n_ip_v4: const struct in_addr *(int)
iface_n_sockaddr_storage: const struct __kernel_sockaddr_storage *(int)
init_account_policy: bool (void)
init_before_fork: NTSTATUS (void)
init_buffer_from_samu: uint32_t (uint8_t **, struct samu *, bool)
init_ldap_debugging: void (void)
init_names: bool (void)
init_registry_data: WERROR (void)
init_registry_key: WERROR (const char *)
init_samu_from_buffer: bool (struct samu *, uint32_t, uint8_t *, uint32_t)
init_stat_ex_from_stat: void (struct stat_ex *, const struct stat *, bool)
initialize_password_db: bool (bool, struct tevent_context *)
interfaces_changed: bool (void)
interpret_long_date: struct timespec (const char *)
interpret_pid: struct server_id (const char *)
is_a_socket: bool (int)
is_dc_trusted_domain_situation: bool (const char *)
is_executable: bool (const char *)
is_in_path: bool (const char *, name_compare_entry *, bool)
is_local_net: bool (const struct sockaddr *)
is_local_net_v4: bool (struct in_addr)
is_myname: bool (const char *)
is_myname_or_ipaddr: bool (const char *)
is_offset_safe: bool (const char *, size_t, char *, size_t)
is_privileged_sid: bool (const struct dom_sid *)
ismyaddr: bool (const struct sockaddr *)
ismyip_v4: bool (struct in_addr)
kernel_flock: void (int, uint32_t, uint32_t)
krb5_to_nt_status: NTSTATUS (krb5_error_code)
lang_msg: const char *(const char *)
lang_msg_free: void (const char *)
lang_tdb_current: char *(void)
lang_tdb_init: bool (const char *)
list_match: bool (const char **, const void *, bool (*)(const char *, const void *))
load_interfaces: void (void)
load_usershare_service: int (const char *)
load_usershare_shares: int (struct smbd_server_connection *, bool (*)(struct smbd_server_connection *, int))
loadparm_s3_helpers: const struct loadparm_s3_helpers *(void)
local_password_change: NTSTATUS (const char *, int, const char *, char **, char **)
lock_path: char *(const char *)
log_stack_trace: void (void)
login_cache_delentry: bool (const struct samu *)
login_cache_init: bool (void)
login_cache_read: bool (struct samu *, struct login_cache *)
login_cache_shutdown: bool (void)
login_cache_write: bool (const struct samu *, const struct login_cache *)
lookup_builtin_name: bool (const char *, uint32_t *)
lookup_builtin_rid: bool (TALLOC_CTX *, uint32_t, const char **)
lookup_global_sam_name: bool (const char *, int, uint32_t *, enum lsa_SidType *)
lookup_name: bool (TALLOC_CTX *, const char *, int, const char **, const char **, struct dom_sid *, enum lsa_SidType *)
lookup_name_smbconf: bool (TALLOC_CTX *, const char *, int, const char **, const char **, struct dom_sid *, enum lsa_SidType *)
lookup_sid: bool (TALLOC_CTX *, const struct dom_sid *, const char **, const char **, enum lsa_SidType *)
lookup_sids: NTSTATUS (TALLOC_CTX *, int, const struct dom_sid **, int, struct lsa_dom_info **, struct lsa_name_info **)
lookup_unix_group_name: bool (const char *, struct dom_sid *)
lookup_unix_user_name: bool (const char *, struct dom_sid *)
lookup_wellknown_name: bool (TALLOC_CTX *, const char *, struct dom_sid *, const char **)
lookup_wellknown_sid: bool (TALLOC_CTX *, const struct dom_sid *, const char **, const char **)
lp__client_ipc_max_protocol: int (void)
lp__client_ipc_min_protocol: int (void)
lp__client_ipc_signing: int (void)
lp__client_max_protocol: int (void)
lp__ctdbd_socket: const char *(void)
lp__disable_spoolss: bool (void)
lp__domain_logons: bool (void)
lp__domain_master: int (void)
lp__ldap_group_suffix: char *(TALLOC_CTX *)
lp__ldap_idmap_suffix: char *(TALLOC_CTX *)
lp__ldap_machine_suffix: char *(TALLOC_CTX *)
lp__ldap_user_suffix: char *(TALLOC_CTX *)
lp__preferred_master: int (void)
lp__printername: char *(TALLOC_CTX *, int)
lp__security: int (void)
lp__server_role: int (void)
lp__tls_cafile: const char *(void)
lp__tls_certfile: const char *(void)
lp__tls_crlfile: const char *(void)
lp__tls_dhpfile: const char *(void)
lp__tls_keyfile: const char *(void)
lp__use_sendfile: bool (int)
lp__winbind_max_domain_connections: int (void)
lp_abort_shutdown_script: char *(TALLOC_CTX *)
lp_access_based_share_enum: bool (int)
lp_acl_allow_execute_always: bool (int)
lp_acl_check_permissions: bool (int)
lp_acl_group_control: bool (int)
lp_acl_map_full_control: bool (int)
lp_add_group_script: char *(TALLOC_CTX *)
lp_add_home: bool (const char *, int, const char *, const char *)
lp_add_machine_script: char *(TALLOC_CTX *)
lp_add_one_printer: void (const char *, const char *, const char *, void *)
lp_add_printer: bool (const char *, int)
lp_add_service: int (const char *, int)
lp_add_share_command: char *(TALLOC_CTX *)
lp_add_user_script: char *(TALLOC_CTX *)
lp_add_user_to_group_script: char *(TALLOC_CTX *)
lp_addport_command: char *(TALLOC_CTX *)
lp_addprinter_command: char *(TALLOC_CTX *)
lp_admin_users: const char **(int)
lp_administrative_share: bool (int)
lp_afs_share: bool (int)
lp_afs_token_lifetime: int (void)
lp_afs_username_map: const char *(void)
lp_aio_max_threads: int (void)
lp_aio_read_size: int (int)
lp_aio_write_behind: char *(TALLOC_CTX *, int)
lp_aio_write_size: int (int)
lp_algorithmic_rid_base: int (void)
lp_allocation_roundup_size: int (int)
lp_allow_dcerpc_auth_level_connect: bool (void)
lp_allow_dns_updates: int (void)
lp_allow_insecure_wide_links: bool (void)
lp_allow_nt4_crypto: bool (void)
lp_allow_trusted_domains: bool (void)
lp_async_smb_echo_handler: bool (void)
lp_auth_methods: const char **(void)
lp_auto_services: char *(TALLOC_CTX *)
lp_autoloaded: bool (int)
lp_bind_interfaces_only: bool (void)
lp_block_size: int (int)
lp_blocking_locks: bool (int)
lp_browse_list: bool (void)
lp_browseable: bool (int)
lp_cache_directory: const char *(void)
lp_canonicalize_boolean: bool (const char *, const char **)
lp_canonicalize_parameter: bool (const char *, const char **, bool *)
lp_canonicalize_parameter_with_value: bool (const char *, const char *, const char **, const char **)
lp_case_sensitive: int (int)
lp_change_notify: bool (void)
lp_change_share_command: char *(TALLOC_CTX *)
lp_check_password_script: char *(TALLOC_CTX *)
lp_cldap_port: int (void)
lp_client_ipc_max_protocol: int (void)
lp_client_ipc_min_protocol: int (void)
lp_client_ipc_signing: int (void)
lp_client_lanman_auth: bool (void)
lp_client_ldap_sasl_wrapping: int (void)
lp_client_max_protocol: int (void)
lp_client_min_protocol: int (void)
lp_client_ntlmv2_auth: bool (void)
lp_client_plaintext_auth: bool (void)
lp_client_schannel: int (void)
lp_client_signing: int (void)
lp_client_use_spnego: bool (void)
lp_client_use_spnego_principal: bool (void)
lp_cluster_addresses: const char **(void)
lp_clustering: bool (void)
lp_comment: char *(TALLOC_CTX *, int)
lp_config_backend: int (void)
lp_config_backend_is_file: bool (void)
lp_config_backend_is_registry: bool (void)
lp_const_servicename: const char *(int)
lp_create_krb5_conf: bool (void)
lp_create_mask: int (int)
lp_csc_policy: int (int)
lp_ctdb_locktime_warn_threshold: int (void)
lp_ctdb_timeout: int (void)
lp_ctdbd_socket: const char *(void)
lp_cups_connection_timeout: int (void)
lp_cups_encrypt: int (void)
lp_cups_options: char *(TALLOC_CTX *, int)
lp_cups_server: char *(TALLOC_CTX *)
lp_dcerpc_endpoint_servers: const char **(void)
lp_deadtime: int (void)
lp_debug_class: bool (void)
lp_debug_hires_timestamp: bool (void)
lp_debug_pid: bool (void)
lp_debug_prefix_timestamp: bool (void)
lp_debug_uid: bool (void)
lp_dedicated_keytab_file: const char *(void)
lp_default_case: int (int)
lp_default_devmode: bool (int)
lp_default_loadparm_service: struct loadparm_service *(void)
lp_default_server_announce: int (void)
lp_defaultservice: char *(TALLOC_CTX *)
lp_defer_sharing_violations: bool (void)
lp_delete_group_script: char *(TALLOC_CTX *)
lp_delete_readonly: bool (int)
lp_delete_share_command: char *(TALLOC_CTX *)
lp_delete_user_from_group_script: char *(TALLOC_CTX *)
lp_delete_user_script: char *(TALLOC_CTX *)
lp_delete_veto_files: bool (int)
lp_deleteprinter_command: char *(TALLOC_CTX *)
lp_dfree_cache_time: int (int)
lp_dfree_command: char *(TALLOC_CTX *, int)
lp_dgram_port: int (void)
lp_directory_mask: int (int)
lp_directory_name_cache_size: int (int)
lp_disable_netbios: bool (void)
lp_disable_spoolss: bool (void)
lp_dmapi_support: bool (int)
lp_dns_forwarder: const char **(void)
lp_dns_update_command: const char **(void)
lp_dnsdomain: const char *(void)
lp_do_parameter: bool (int, const char *, const char *)
lp_do_section: bool (const char *, void *)
lp_domain_master: bool (void)
lp_dont_descend: char *(TALLOC_CTX *, int)
lp_dos_charset: const char *(void)
lp_dos_filemode: bool (int)
lp_dos_filetime_resolution: bool (int)
lp_dos_filetimes: bool (int)
lp_dump: void (FILE *, bool, int)
lp_dump_one: void (FILE *, bool, int)
lp_durable_handles: bool (int)
lp_ea_support: bool (int)
lp_enable_asu_support: bool (void)
lp_enable_core_files: bool (void)
lp_enable_privileges: bool (void)
lp_encrypt_passwords: bool (void)
lp_enhanced_browsing: bool (void)
lp_enumports_command: char *(TALLOC_CTX *)
lp_eventlog_list: const char **(void)
lp_fake_directory_create_times: bool (int)
lp_fake_oplocks: bool (int)
lp_file_list_changed: bool (void)
lp_follow_symlinks: bool (int)
lp_force_create_mode: int (int)
lp_force_directory_mode: int (int)
lp_force_group: char *(TALLOC_CTX *, int)
lp_force_printername: bool (int)
lp_force_unknown_acl_user: bool (int)
lp_force_user: char *(TALLOC_CTX *, int)
lp_fstype: const char *(int)
lp_get_quota_command: char *(TALLOC_CTX *)
lp_get_spoolss_state: uint32_t (void)
lp_getwd_cache: bool (void)
lp_guest_account: const char *(void)
lp_guest_ok: bool (int)
lp_guest_only: bool (int)
lp_hide_dot_files: bool (int)
lp_hide_files: char *(TALLOC_CTX *, int)
lp_hide_special_files: bool (int)
lp_hide_unreadable: bool (int)
lp_hide_unwriteable_files: bool (int)
lp_homedir_map: char *(TALLOC_CTX *)
lp_host_msdfs: bool (void)
lp_hostname_lookups: bool (void)
lp_hosts_allow: const char **(int)
lp_hosts_deny: const char **(int)
lp_idmap_backend: const char *(const char *)
lp_idmap_cache_time: int (void)
lp_idmap_default_backend: const char *(void)
lp_idmap_default_range: bool (uint32_t *, uint32_t *)
lp_idmap_negative_cache_time: int (void)
lp_idmap_range: bool (const char *, uint32_t *, uint32_t *)
lp_include: bool (struct loadparm_context *, struct loadparm_service *, const char *, char **)
lp_inherit_acls: bool (int)
lp_inherit_owner: bool (int)
lp_inherit_permissions: bool (int)
lp_init_logon_delay: int (void)
lp_init_logon_delayed_hosts: const char **(void)
lp_interfaces: const char **(void)
lp_invalid_users: const char **(int)
lp_invert_boolean: bool (const char *, const char **)
lp_iprint_server: char *(TALLOC_CTX *)
lp_keepalive: int (void)
lp_kerberos_method: int (void)
lp_kernel_change_notify: bool (void)
lp_kernel_oplocks: bool (int)
lp_kernel_share_modes: bool (int)
lp_kill_all_services: void (void)
lp_killservice: void (int)
lp_killunused: void (struct smbd_server_connection *, bool (*)(struct smbd_server_connection *, int))
lp_kpasswd_port: int (void)
lp_krb5_port: int (void)
lp_lanman_auth: bool (void)
lp_large_readwrite: bool (void)
lp_ldap_admin_dn: char *(TALLOC_CTX *)
lp_ldap_connection_timeout: int (void)
lp_ldap_debug_level: int (void)
lp_ldap_debug_threshold: int (void)
lp_ldap_delete_dn: bool (void)
lp_ldap_deref: int (void)
lp_ldap_follow_referral: int (void)
lp_ldap_group_suffix: const char *(TALLOC_CTX *)
lp_ldap_idmap_suffix: const char *(TALLOC_CTX *)
lp_ldap_machine_suffix: const char *(TALLOC_CTX *)
lp_ldap_page_size: int (void)
lp_ldap_passwd_sync: int (void)
lp_ldap_replication_sleep: int (void)
lp_ldap_server_require_strong_auth: int (void)
lp_ldap_ssl: int (void)
lp_ldap_ssl_ads: bool (void)
lp_ldap_suffix: char *(TALLOC_CTX *)
lp_ldap_timeout: int (void)
lp_ldap_user_suffix: const char *(TALLOC_CTX *)
lp_level2_oplocks: bool (int)
lp_lm_announce: int (void)
lp_lm_interval: int (void)
lp_load_client: bool (const char *)
lp_load_client_no_reinit: bool (const char *)
lp_load_global: bool (const char *)
lp_load_global_no_reinit: bool (const char *)
lp_load_initial_only: bool (const char *)
lp_load_no_reinit: bool (const char *)
lp_load_printers: bool (void)
lp_load_with_registry_shares: bool (const char *)
lp_load_with_shares: bool (const char *)
lp_loaded: bool (void)
lp_local_master: bool (void)
lp_lock_directory: const char *(void)
lp_lock_spin_time: int (void)
lp_locking: bool (const struct share_params *)
lp_log_level: char *(TALLOC_CTX *)
lp_log_nt_token_command: char *(TALLOC_CTX *)
lp_log_writeable_files_on_exit: bool (void)
lp_logfile: char *(TALLOC_CTX *)
lp_logging: char *(TALLOC_CTX *)
lp_logon_drive: const char *(void)
lp_logon_home: const char *(void)
lp_logon_path: const char *(void)
lp_logon_script: const char *(void)
lp_lppause_command: char *(TALLOC_CTX *, int)
lp_lpq_cache_time: int (void)
lp_lpq_command: char *(TALLOC_CTX *, int)
lp_lpresume_command: char *(TALLOC_CTX *, int)
lp_lprm_command: char *(TALLOC_CTX *, int)
lp_machine_password_timeout: int (void)
lp_magic_output: char *(TALLOC_CTX *, int)
lp_magic_script: char *(TALLOC_CTX *, int)
lp_mangle_prefix: int (void)
lp_mangled_names: bool (const struct share_params *)
lp_mangling_char: char (const struct share_params *)
lp_mangling_method: char *(TALLOC_CTX *)
lp_map_acl_inherit: bool (int)
lp_map_archive: bool (int)
lp_map_hidden: bool (int)
lp_map_readonly: int (int)
lp_map_system: bool (int)
lp_map_to_guest: int (void)
lp_map_untrusted_to_domain: bool (void)
lp_max_connections: int (int)
lp_max_disk_size: int (void)
lp_max_log_size: int (void)
lp_max_mux: int (void)
lp_max_open_files: int (void)
lp_max_print_jobs: int (int)
lp_max_reported_print_jobs: int (int)
lp_max_smbd_processes: int (void)
lp_max_stat_cache_size: int (void)
lp_max_ttl: int (void)
lp_max_wins_ttl: int (void)
lp_max_xmit: int (void)
lp_maxprintjobs: int (int)
lp_message_command: char *(TALLOC_CTX *)
lp_min_print_space: int (int)
lp_min_receive_file_size: int (void)
lp_min_receivefile_size: int (void)
lp_min_wins_ttl: int (void)
lp_msdfs_proxy: char *(TALLOC_CTX *, int)
lp_msdfs_root: bool (int)
lp_msdfs_shuffle_referrals: bool (int)
lp_multicast_dns_register: bool (void)
lp_name_cache_timeout: int (void)
lp_name_resolve_order: const char **(void)
lp_nbt_client_socket_address: const char *(void)
lp_nbt_port: int (void)
lp_ncalrpc_dir: const char *(void)
lp_netbios_aliases: const char **(void)
lp_netbios_name: const char *(void)
lp_netbios_scope: const char *(void)
lp_neutralize_nt4_emulation: bool (void)
lp_next_configfile: char *(TALLOC_CTX *)
lp_nis_homedir: bool (void)
lp_nmbd_bind_explicit_broadcast: bool (void)
lp_nsupdate_command: const char **(void)
lp_nt_acl_support: bool (int)
lp_nt_pipe_support: bool (void)
lp_nt_status_support: bool (void)
lp_ntlm_auth: bool (void)
lp_ntp_signd_socket_directory: const char *(void)
lp_ntvfs_handler: const char **(int)
lp_null_passwords: bool (void)
lp_numservices: int (void)
lp_obey_pam_restrictions: bool (void)
lp_old_password_allowed_period: int (void)
lp_oplock_break_wait_time: int (void)
lp_oplock_contention_limit: int (int)
lp_oplocks: bool (int)
lp_os2_driver_map: char *(TALLOC_CTX *)
lp_os_level: int (void)
lp_pam_password_change: bool (void)
lp_panic_action: char *(TALLOC_CTX *)
lp_parameter_is_global: bool (const char *)
lp_parameter_is_valid: bool (const char *)
lp_parm_bool: bool (int, const char *, const char *, bool)
lp_parm_const_string: const char *(int, const char *, const char *, const char *)
lp_parm_enum: int (int, const char *, const char *, const struct enum_list *, int)
lp_parm_int: int (int, const char *, const char *, int)
lp_parm_ptr: void *(struct loadparm_service *, struct parm_struct *)
lp_parm_string_list: const char **(int, const char *, const char *, const char **)
lp_parm_talloc_string: char *(TALLOC_CTX *, int, const char *, const char *, const char *)
lp_parm_ulong: unsigned long (int, const char *, const char *, unsigned long)
lp_parm_ulonglong: unsigned long long (int, const char *, const char *, unsigned long long)
lp_passdb_backend: const char *(void)
lp_passdb_expand_explicit: bool (void)
lp_passwd_chat: char *(TALLOC_CTX *)
lp_passwd_chat_debug: bool (void)
lp_passwd_chat_timeout: int (void)
lp_passwd_program: char *(TALLOC_CTX *)
lp_password_hash_gpg_key_ids: const char **(void)
lp_password_server: const char *(void)
lp_path: char *(TALLOC_CTX *, int)
lp_perfcount_module: char *(TALLOC_CTX *)
lp_pid_directory: const char *(void)
lp_posix_cifsu_locktype: enum brl_flavour (files_struct *)
lp_posix_locking: bool (const struct share_params *)
lp_posix_pathnames: bool (void)
lp_postexec: char *(TALLOC_CTX *, int)
lp_preexec: char *(TALLOC_CTX *, int)
lp_preexec_close: bool (int)
lp_preferred_master: bool (void)
lp_preload_modules: const char **(void)
lp_preserve_case: bool (int)
lp_print_command: char *(TALLOC_CTX *, int)
lp_print_notify_backchannel: bool (int)
lp_printable: bool (int)
lp_printcap_cache_time: int (void)
lp_printcap_name: const char *(void)
lp_printcapname: const char *(void)
lp_printername: const char *(TALLOC_CTX *, int)
lp_printing: int (int)
lp_printjob_username: const char *(int)
lp_private_dir: const char *(void)
lp_profile_acls: bool (int)
lp_queuepause_command: char *(TALLOC_CTX *, int)
lp_queueresume_command: char *(TALLOC_CTX *, int)
lp_raw_ntlmv2_auth: bool (void)
lp_read_list: const char **(int)
lp_read_only: bool (int)
lp_read_raw: bool (void)
lp_realm: const char *(void)
lp_registry_shares: bool (void)
lp_reject_md5_clients: bool (void)
lp_reject_md5_servers: bool (void)
lp_remote_announce: char *(TALLOC_CTX *)
lp_remote_browse_sync: char *(TALLOC_CTX *)
lp_remove_service: void (int)
lp_rename_user_script: char *(TALLOC_CTX *)
lp_require_strong_key: bool (void)
lp_reset_on_zero_vc: bool (void)
lp_restrict_anonymous: int (void)
lp_rndc_command: const char **(void)
lp_root_directory: char *(TALLOC_CTX *)
lp_root_postexec: char *(TALLOC_CTX *, int)
lp_root_preexec: char *(TALLOC_CTX *, int)
lp_root_preexec_close: bool (int)
lp_rpc_big_endian: bool (void)
lp_samba_kcc_command: const char **(void)
lp_security: int (void)
lp_server_max_protocol: int (void)
lp_server_min_protocol: int (void)
lp_server_multi_channel_support: bool (void)
lp_server_role: int (void)
lp_server_schannel: int (void)
lp_server_services: const char **(void)
lp_server_signing: int (void)
lp_server_string: char *(TALLOC_CTX *)
lp_service: struct loadparm_service *(const char *)
lp_servicebynum: struct loadparm_service *(int)
lp_servicename: char *(TALLOC_CTX *, int)
lp_servicenumber: int (const char *)
lp_set_cmdline: bool (const char *, const char *)
lp_set_logfile: void (const char *)
lp_set_mangling_method: void (const char *)
lp_set_posix_default_cifsx_readwrite_locktype: void (enum brl_flavour)
lp_set_posix_pathnames: void (void)
lp_set_primary_group_script: char *(TALLOC_CTX *)
lp_set_quota_command: char *(TALLOC_CTX *)
lp_set_spoolss_state: void (uint32_t)
lp_share_backend: const char *(void)
lp_short_preserve_case: bool (int)
lp_show_add_printer_wizard: bool (void)
lp_shutdown_script: char *(TALLOC_CTX *)
lp_smb2_leases: bool (void)
lp_smb2_max_credits: int (void)
lp_smb2_max_read: int (void)
lp_smb2_max_trans: int (void)
lp_smb2_max_write: int (void)
lp_smb_encrypt: int (int)
lp_smb_passwd_file: const char *(void)
lp_smb_ports: const char **(void)
lp_smbd_profiling_level: int (void)
lp_snum_ok: bool (int)
lp_socket_options: const char *(void)
lp_spn_update_command: const char **(void)
lp_spotlight: bool (int)
lp_stat_cache: bool (void)
lp_state_directory: const char *(void)
lp_store_dos_attributes: bool (int)
lp_strict_allocate: bool (int)
lp_strict_locking: int (const struct share_params *)
lp_strict_rename: bool (int)
lp_strict_sync: bool (int)
lp_string: char *(TALLOC_CTX *, const char *)
lp_svcctl_list: const char **(void)
lp_sync_always: bool (int)
lp_syslog: int (void)
lp_syslog_only: bool (void)
lp_template_homedir: const char *(void)
lp_template_shell: const char *(void)
lp_time_server: bool (void)
lp_timestamp_logs: bool (void)
lp_tls_enabled: bool (void)
lp_tls_priority: const char *(void)
lp_tls_verify_peer: int (void)
lp_unicode: bool (void)
lp_unix_charset: const char *(void)
lp_unix_extensions: bool (void)
lp_unix_password_sync: bool (void)
lp_use_client_driver: bool (int)
lp_use_mmap: bool (void)
lp_use_sendfile: bool (int, struct smb_signing_state *)
lp_use_spnego: bool (void)
lp_username_level: int (void)
lp_username_map: char *(TALLOC_CTX *)
lp_username_map_cache_time: int (void)
lp_username_map_script: char *(TALLOC_CTX *)
lp_usershare_allow_guests: bool (void)
lp_usershare_max_shares: int (void)
lp_usershare_owner_only: bool (void)
lp_usershare_path: char *(TALLOC_CTX *)
lp_usershare_prefix_allow_list: const char **(void)
lp_usershare_prefix_deny_list: const char **(void)
lp_usershare_template_share: char *(TALLOC_CTX *)
lp_utmp: bool (void)
lp_utmp_directory: const char *(void)
lp_valid_users: const char **(int)
lp_veto_files: char *(TALLOC_CTX *, int)
lp_veto_oplock_files: char *(TALLOC_CTX *, int)
lp_vfs_objects: const char **(int)
lp_volume: char *(TALLOC_CTX *, int)
lp_we_are_a_wins_server: bool (void)
lp_web_port: int (void)
lp_wi_scan_global_parametrics: int (const char *, size_t, bool (*)(const char *, regmatch_t *, void *), void *)
lp_wide_links: bool (int)
lp_widelinks: bool (int)
lp_winbind_cache_time: int (void)
lp_winbind_enum_groups: bool (void)
lp_winbind_enum_users: bool (void)
lp_winbind_expand_groups: int (void)
lp_winbind_max_clients: int (void)
lp_winbind_max_domain_connections: int (void)
lp_winbind_nested_groups: bool (void)
lp_winbind_normalize_names: bool (void)
lp_winbind_nss_info: const char **(void)
lp_winbind_offline_logon: bool (void)
lp_winbind_reconnect_delay: int (void)
lp_winbind_refresh_tickets: bool (void)
lp_winbind_request_timeout: int (void)
lp_winbind_rpc_only: bool (void)
lp_winbind_sealed_pipes: bool (void)
lp_winbind_separator: const char *(void)
lp_winbind_trusted_domains_only: bool (void)
lp_winbind_use_default_domain: bool (void)
lp_winbindd_privileged_socket_directory: const char *(void)
lp_winbindd_socket_directory: const char *(void)
lp_wins_dns_proxy: bool (void)
lp_wins_hook: char *(TALLOC_CTX *)
lp_wins_proxy: bool (void)
lp_wins_server_list: const char **(void)
lp_workgroup: const char *(void)
lp_write_cache_size: int (int)
lp_write_list: const char **(int)
lp_write_raw: bool (void)
lp_wtmp_directory: const char *(void)
lsa_secret_delete: NTSTATUS (const char *)
lsa_secret_get: NTSTATUS (TALLOC_CTX *, const char *, DATA_BLOB *, NTTIME *, DATA_BLOB *, NTTIME *, struct security_descriptor **)
lsa_secret_set: NTSTATUS (const char *, DATA_BLOB *, DATA_BLOB *, struct security_descriptor *)
make_pdb_method: NTSTATUS (struct pdb_methods **)
make_pdb_method_name: NTSTATUS (struct pdb_methods **, const char *)
make_unix_date: time_t (const void *, int)
make_unix_date2: time_t (const void *, int)
make_unix_date3: time_t (const void *, int)
map_errno_from_nt_status: int (NTSTATUS)
map_nt_error_from_unix: NTSTATUS (int)
map_open_params_to_ntcreate: bool (const char *, int, int, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *)
map_process_lock_to_ofd_lock: int (int, bool *)
map_share_mode_to_deny_mode: uint32_t (uint32_t, uint32_t)
map_werror_from_unix: WERROR (int)
mask_match: bool (const char *, const char *, bool)
mask_match_list: bool (const char *, char **, int, bool)
mask_match_search: bool (const char *, const char *, bool)
max_algorithmic_gid: gid_t (void)
max_algorithmic_uid: uid_t (void)
merge_nt_token: NTSTATUS (TALLOC_CTX *, const struct security_token *, const struct security_token *, struct security_token **)
message_push_blob: ssize_t (uint8_t **, DATA_BLOB)
message_send_all: bool (struct messaging_context *, int, const void *, size_t, int *)
messaging_cleanup: int (struct messaging_context *, pid_t)
messaging_ctdbd_connection: struct ctdbd_connection *(void)
messaging_ctdbd_init: int (struct messaging_context *, TALLOC_CTX *, struct messaging_backend **)
messaging_ctdbd_reinit: int (struct messaging_context *, TALLOC_CTX *, struct messaging_backend *)
messaging_deregister: void (struct messaging_context *, uint32_t, void *)
messaging_filtered_read_recv: int (struct tevent_req *, TALLOC_CTX *, struct messaging_rec **)
messaging_filtered_read_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct messaging_context *, bool (*)(struct messaging_rec *, void *), void *)
messaging_handler_recv: int (struct tevent_req *)
messaging_handler_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct messaging_context *, uint32_t, bool (*)(struct messaging_context *, struct messaging_rec **, void *), void *)
messaging_init: struct messaging_context *(TALLOC_CTX *, struct tevent_context *)
messaging_names_db: struct server_id_db *(struct messaging_context *)
messaging_parent_dgm_cleanup_init: bool (struct messaging_context *)
messaging_read_recv: int (struct tevent_req *, TALLOC_CTX *, struct messaging_rec **)
messaging_read_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct messaging_context *, uint32_t)
messaging_register: NTSTATUS (struct messaging_context *, void *, uint32_t, void (*)(struct messaging_context *, void *, uint32_t, struct server_id, DATA_BLOB *))
messaging_reinit: NTSTATUS (struct messaging_context *)
messaging_send: NTSTATUS (struct messaging_context *, struct server_id, uint32_t, const DATA_BLOB *)
messaging_send_buf: NTSTATUS (struct messaging_context *, struct server_id, uint32_t, const uint8_t *, size_t)
messaging_send_iov: NTSTATUS (struct messaging_context *, struct server_id, uint32_t, const struct iovec *, int, const int *, size_t)
messaging_send_iov_from: int (struct messaging_context *, struct server_id, struct server_id, uint32_t, const struct iovec *, int, const int *, size_t)
messaging_server_id: struct server_id (const struct messaging_context *)
messaging_tevent_context: struct tevent_context *(struct messaging_context *)
ms_fnmatch: int (const char *, const char *, bool, bool)
ms_has_wild: bool (const char *)
ms_has_wild_w: bool (const smb_ucs2_t *)
my_netbios_names: const char *(int)
my_sam_name: const char *(void)
myhostname: char *(void)
myhostname_upper: char *(void)
name_to_fqdn: bool (char *, const char *)
nametogid: gid_t (const char *)
nametouid: uid_t (const char *)
ndr_print_TRUSTED_DOM_PASS: void (struct ndr_print *, const char *, const struct TRUSTED_DOM_PASS *)
ndr_print_lsa_secret: void (struct ndr_print *, const char *, const struct lsa_secret *)
ndr_print_messaging_rec: void (struct ndr_print *, const char *, const struct messaging_rec *)
ndr_print_messaging_reclog: void (struct ndr_print *, const char *, const struct messaging_reclog *)
ndr_print_messaging_type: void (struct ndr_print *, const char *, enum messaging_type)
ndr_pull_TRUSTED_DOM_PASS: enum ndr_err_code (struct ndr_pull *, int, struct TRUSTED_DOM_PASS *)
ndr_pull_lsa_secret: enum ndr_err_code (struct ndr_pull *, int, struct lsa_secret *)
ndr_pull_messaging_rec: enum ndr_err_code (struct ndr_pull *, int, struct messaging_rec *)
ndr_pull_messaging_reclog: enum ndr_err_code (struct ndr_pull *, int, struct messaging_reclog *)
ndr_pull_messaging_type: enum ndr_err_code (struct ndr_pull *, int, enum messaging_type *)
ndr_push_TRUSTED_DOM_PASS: enum ndr_err_code (struct ndr_push *, int, const struct TRUSTED_DOM_PASS *)
ndr_push_lsa_secret: enum ndr_err_code (struct ndr_push *, int, const struct lsa_secret *)
ndr_push_messaging_rec: enum ndr_err_code (struct ndr_push *, int, const struct messaging_rec *)
ndr_push_messaging_reclog: enum ndr_err_code (struct ndr_push *, int, const struct messaging_reclog *)
ndr_push_messaging_type: enum ndr_err_code (struct ndr_push *, int, enum messaging_type)
non_mappable_sid: bool (struct dom_sid *)
normalize_reg_path: char *(TALLOC_CTX *, const char *)
nt_status_to_krb5: krb5_error_code (NTSTATUS)
nt_time_is_set: bool (const NTTIME *)
nt_time_is_zero: bool (const NTTIME *)
nt_time_to_unix_abs: time_t (const NTTIME *)
nttime_from_string: NTTIME (const char *)
open_socket_in: int (int, uint16_t, int, const struct __kernel_sockaddr_storage *, bool)
open_socket_out: NTSTATUS (const struct __kernel_sockaddr_storage *, uint16_t, int, int *)
open_socket_out_defer_recv: NTSTATUS (struct tevent_req *, int *)
open_socket_out_defer_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct timeval, const struct __kernel_sockaddr_storage *, uint16_t, int)
open_socket_out_recv: NTSTATUS (struct tevent_req *, int *)
open_socket_out_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, const struct __kernel_sockaddr_storage *, uint16_t, int)
open_udp_socket: int (const char *, int)
parent_dirname: bool (TALLOC_CTX *, const char *, char **, const char **)
parse_usershare_acl: bool (TALLOC_CTX *, const char *, struct security_descriptor **)
parse_usershare_file: enum usershare_err (TALLOC_CTX *, SMB_STRUCT_STAT *, const char *, int, char **, int, char **, char **, char **, struct security_descriptor **, bool *)
pdb_add_aliasmem: NTSTATUS (const struct dom_sid *, const struct dom_sid *)
pdb_add_group_mapping_entry: NTSTATUS (GROUP_MAP *)
pdb_add_groupmem: NTSTATUS (TALLOC_CTX *, uint32_t, uint32_t)
pdb_add_sam_account: NTSTATUS (struct samu *)
pdb_build_fields_present: uint32_t (struct samu *)
pdb_capabilities: uint32_t (void)
pdb_copy_sam_account: bool (struct samu *, struct samu *)
pdb_create_alias: NTSTATUS (const char *, uint32_t *)
pdb_create_builtin: NTSTATUS (uint32_t)
pdb_create_builtin_alias: NTSTATUS (uint32_t, gid_t)
pdb_create_dom_group: NTSTATUS (TALLOC_CTX *, const char *, uint32_t *)
pdb_create_user: NTSTATUS (TALLOC_CTX *, const char *, uint32_t, uint32_t *)
pdb_decode_acct_ctrl: uint32_t (const char *)
pdb_default_add_aliasmem: NTSTATUS (struct pdb_methods *, const struct dom_sid *, const struct dom_sid *)
pdb_default_add_group_mapping_entry: NTSTATUS (struct pdb_methods *, GROUP_MAP *)
pdb_default_alias_memberships: NTSTATUS (struct pdb_methods *, TALLOC_CTX *, const struct dom_sid *, const struct dom_sid *, size_t, uint32_t **, size_t *)
pdb_default_create_alias: NTSTATUS (struct pdb_methods *, const char *, uint32_t *)
pdb_default_del_aliasmem: NTSTATUS (struct pdb_methods *, const struct dom_sid *, const struct dom_sid *)
pdb_default_delete_alias: NTSTATUS (struct pdb_methods *, const struct dom_sid *)
pdb_default_delete_group_mapping_entry: NTSTATUS (struct pdb_methods *, struct dom_sid)
pdb_default_enum_aliasmem: NTSTATUS (struct pdb_methods *, const struct dom_sid *, TALLOC_CTX *, struct dom_sid **, size_t *)
pdb_default_enum_group_mapping: NTSTATUS (struct pdb_methods *, const struct dom_sid *, enum lsa_SidType, GROUP_MAP ***, size_t *, bool)
pdb_default_get_aliasinfo: NTSTATUS (struct pdb_methods *, const struct dom_sid *, struct acct_info *)
pdb_default_getgrgid: NTSTATUS (struct pdb_methods *, GROUP_MAP *, gid_t)
pdb_default_getgrnam: NTSTATUS (struct pdb_methods *, GROUP_MAP *, const char *)
pdb_default_getgrsid: NTSTATUS (struct pdb_methods *, GROUP_MAP *, struct dom_sid)
pdb_default_set_aliasinfo: NTSTATUS (struct pdb_methods *, const struct dom_sid *, struct acct_info *)
pdb_default_update_group_mapping_entry: NTSTATUS (struct pdb_methods *, GROUP_MAP *)
pdb_del_aliasmem: NTSTATUS (const struct dom_sid *, const struct dom_sid *)
pdb_del_groupmem: NTSTATUS (TALLOC_CTX *, uint32_t, uint32_t)
pdb_del_trusted_domain: NTSTATUS (const char *)
pdb_del_trusteddom_pw: bool (const char *)
pdb_delete_alias: NTSTATUS (const struct dom_sid *)
pdb_delete_dom_group: NTSTATUS (TALLOC_CTX *, uint32_t)
pdb_delete_group_mapping_entry: NTSTATUS (struct dom_sid)
pdb_delete_sam_account: NTSTATUS (struct samu *)
pdb_delete_secret: NTSTATUS (const char *)
pdb_delete_user: NTSTATUS (TALLOC_CTX *, struct samu *)
pdb_element_is_changed: bool (const struct samu *, enum pdb_elements)
pdb_element_is_set_or_changed: bool (const struct samu *, enum pdb_elements)
pdb_encode_acct_ctrl: char *(uint32_t, size_t)
pdb_enum_alias_memberships: NTSTATUS (TALLOC_CTX *, const struct dom_sid *, const struct dom_sid *, size_t, uint32_t **, size_t *)
pdb_enum_aliasmem: NTSTATUS (const struct dom_sid *, TALLOC_CTX *, struct dom_sid **, size_t *)
pdb_enum_group_mapping: bool (const struct dom_sid *, enum lsa_SidType, GROUP_MAP ***, size_t *, bool)
pdb_enum_group_members: NTSTATUS (TALLOC_CTX *, const struct dom_sid *, uint32_t **, size_t *)
pdb_enum_group_memberships: NTSTATUS (TALLOC_CTX *, struct samu *, struct dom_sid **, gid_t **, uint32_t *)
pdb_enum_trusted_domains: NTSTATUS (TALLOC_CTX *, uint32_t *, struct pdb_trusted_domain ***)
pdb_enum_trusteddoms: NTSTATUS (TALLOC_CTX *, uint32_t *, struct trustdom_info ***)
pdb_enum_upn_suffixes: NTSTATUS (TALLOC_CTX *, uint32_t *, char ***)
pdb_find_backend_entry: struct pdb_init_function_entry *(const char *)
pdb_get_account_policy: bool (enum pdb_policy_type, uint32_t *)
pdb_get_acct_ctrl: uint32_t (const struct samu *)
pdb_get_acct_desc: const char *(const struct samu *)
pdb_get_aliasinfo: NTSTATUS (const struct dom_sid *, struct acct_info *)
pdb_get_backend_private_data: void *(const struct samu *, const struct pdb_methods *)
pdb_get_backends: const struct pdb_init_function_entry *(void)
pdb_get_bad_password_count: uint16_t (const struct samu *)
pdb_get_bad_password_time: time_t (const struct samu *)
pdb_get_code_page: uint16_t (const struct samu *)
pdb_get_comment: const char *(const struct samu *)
pdb_get_country_code: uint16_t (const struct samu *)
pdb_get_dir_drive: const char *(const struct samu *)
pdb_get_domain: const char *(const struct samu *)
pdb_get_domain_info: struct pdb_domain_info *(TALLOC_CTX *)
pdb_get_fullname: const char *(const struct samu *)
pdb_get_group_rid: uint32_t (struct samu *)
pdb_get_group_sid: const struct dom_sid *(struct samu *)
pdb_get_homedir: const char *(const struct samu *)
pdb_get_hours: const uint8_t *(const struct samu *)
pdb_get_hours_len: uint32_t (const struct samu *)
pdb_get_init_flags: enum pdb_value_state (const struct samu *, enum pdb_elements)
pdb_get_kickoff_time: time_t (const struct samu *)
pdb_get_lanman_passwd: const uint8_t *(const struct samu *)
pdb_get_logoff_time: time_t (const struct samu *)
pdb_get_logon_count: uint16_t (const struct samu *)
pdb_get_logon_divs: uint16_t (const struct samu *)
pdb_get_logon_script: const char *(const struct samu *)
pdb_get_logon_time: time_t (const struct samu *)
pdb_get_munged_dial: const char *(const struct samu *)
pdb_get_nt_passwd: const uint8_t *(const struct samu *)
pdb_get_nt_username: const char *(const struct samu *)
pdb_get_pass_can_change: bool (const struct samu *)
pdb_get_pass_can_change_time: time_t (const struct samu *)
pdb_get_pass_can_change_time_noncalc: time_t (const struct samu *)
pdb_get_pass_last_set_time: time_t (const struct samu *)
pdb_get_pass_must_change_time: time_t (const struct samu *)
pdb_get_plaintext_passwd: const char *(const struct samu *)
pdb_get_profile_path: const char *(const struct samu *)
pdb_get_pw_history: const uint8_t *(const struct samu *, uint32_t *)
pdb_get_secret: NTSTATUS (TALLOC_CTX *, const char *, DATA_BLOB *, NTTIME *, DATA_BLOB *, NTTIME *, struct security_descriptor **)
pdb_get_seq_num: bool (time_t *)
pdb_get_tevent_context: struct tevent_context *(void)
pdb_get_trust_credentials: NTSTATUS (const char *, const char *, TALLOC_CTX *, struct cli_credentials **)
pdb_get_trusted_domain: NTSTATUS (TALLOC_CTX *, const char *, struct pdb_trusted_domain **)
pdb_get_trusted_domain_by_sid: NTSTATUS (TALLOC_CTX *, struct dom_sid *, struct pdb_trusted_domain **)
pdb_get_trusteddom_creds: NTSTATUS (const char *, TALLOC_CTX *, struct cli_credentials **)
pdb_get_trusteddom_pw: bool (const char *, char **, struct dom_sid *, time_t *)
pdb_get_unknown_6: uint32_t (const struct samu *)
pdb_get_user_rid: uint32_t (const struct samu *)
pdb_get_user_sid: const struct dom_sid *(const struct samu *)
pdb_get_username: const char *(const struct samu *)
pdb_get_workstations: const char *(const struct samu *)
pdb_getgrgid: bool (GROUP_MAP *, gid_t)
pdb_getgrnam: bool (GROUP_MAP *, const char *)
pdb_getgrsid: bool (GROUP_MAP *, struct dom_sid)
pdb_gethexhours: bool (const char *, unsigned char *)
pdb_gethexpwd: bool (const char *, unsigned char *)
pdb_getsampwnam: bool (struct samu *, const char *)
pdb_getsampwsid: bool (struct samu *, const struct dom_sid *)
pdb_group_rid_to_gid: gid_t (uint32_t)
pdb_id_to_sid: bool (struct unixid *, struct dom_sid *)
pdb_increment_bad_password_count: bool (struct samu *)
pdb_is_password_change_time_max: bool (time_t)
pdb_is_responsible_for_builtin: bool (void)
pdb_is_responsible_for_everything_else: bool (void)
pdb_is_responsible_for_our_sam: bool (void)
pdb_is_responsible_for_unix_groups: bool (void)
pdb_is_responsible_for_unix_users: bool (void)
pdb_is_responsible_for_wellknown: bool (void)
pdb_lookup_rids: NTSTATUS (const struct dom_sid *, int, uint32_t *, const char **, enum lsa_SidType *)
pdb_new_rid: bool (uint32_t *)
pdb_nop_add_group_mapping_entry: NTSTATUS (struct pdb_methods *, GROUP_MAP *)
pdb_nop_delete_group_mapping_entry: NTSTATUS (struct pdb_methods *, struct dom_sid)
pdb_nop_enum_group_mapping: NTSTATUS (struct pdb_methods *, enum lsa_SidType, GROUP_MAP **, size_t *, bool)
pdb_nop_getgrgid: NTSTATUS (struct pdb_methods *, GROUP_MAP *, gid_t)
pdb_nop_getgrnam: NTSTATUS (struct pdb_methods *, GROUP_MAP *, const char *)
pdb_nop_getgrsid: NTSTATUS (struct pdb_methods *, GROUP_MAP *, struct dom_sid)
pdb_nop_update_group_mapping_entry: NTSTATUS (struct pdb_methods *, GROUP_MAP *)
pdb_rename_sam_account: NTSTATUS (struct samu *, const char *)
pdb_search_aliases: struct pdb_search *(TALLOC_CTX *, const struct dom_sid *)
pdb_search_entries: uint32_t (struct pdb_search *, uint32_t, uint32_t, struct samr_displayentry **)
pdb_search_groups: struct pdb_search *(TALLOC_CTX *)
pdb_search_users: struct pdb_search *(TALLOC_CTX *, uint32_t)
pdb_set_account_policy: bool (enum pdb_policy_type, uint32_t)
pdb_set_acct_ctrl: bool (struct samu *, uint32_t, enum pdb_value_state)
pdb_set_acct_desc: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_aliasinfo: NTSTATUS (const struct dom_sid *, struct acct_info *)
pdb_set_backend_private_data: bool (struct samu *, void *, void (*)(void **), const struct pdb_methods *, enum pdb_value_state)
pdb_set_bad_password_count: bool (struct samu *, uint16_t, enum pdb_value_state)
pdb_set_bad_password_time: bool (struct samu *, time_t, enum pdb_value_state)
pdb_set_code_page: bool (struct samu *, uint16_t, enum pdb_value_state)
pdb_set_comment: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_country_code: bool (struct samu *, uint16_t, enum pdb_value_state)
pdb_set_dir_drive: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_domain: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_fullname: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_group_sid: bool (struct samu *, const struct dom_sid *, enum pdb_value_state)
pdb_set_group_sid_from_rid: bool (struct samu *, uint32_t, enum pdb_value_state)
pdb_set_homedir: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_hours: bool (struct samu *, const uint8_t *, int, enum pdb_value_state)
pdb_set_hours_len: bool (struct samu *, uint32_t, enum pdb_value_state)
pdb_set_init_flags: bool (struct samu *, enum pdb_elements, enum pdb_value_state)
pdb_set_kickoff_time: bool (struct samu *, time_t, enum pdb_value_state)
pdb_set_lanman_passwd: bool (struct samu *, const uint8_t *, enum pdb_value_state)
pdb_set_logoff_time: bool (struct samu *, time_t, enum pdb_value_state)
pdb_set_logon_count: bool (struct samu *, uint16_t, enum pdb_value_state)
pdb_set_logon_divs: bool (struct samu *, uint16_t, enum pdb_value_state)
pdb_set_logon_script: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_logon_time: bool (struct samu *, time_t, enum pdb_value_state)
pdb_set_munged_dial: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_nt_passwd: bool (struct samu *, const uint8_t *, enum pdb_value_state)
pdb_set_nt_username: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_pass_can_change: bool (struct samu *, bool)
pdb_set_pass_can_change_time: bool (struct samu *, time_t, enum pdb_value_state)
pdb_set_pass_last_set_time: bool (struct samu *, time_t, enum pdb_value_state)
pdb_set_plaintext_passwd: bool (struct samu *, const char *)
pdb_set_plaintext_pw_only: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_profile_path: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_pw_history: bool (struct samu *, const uint8_t *, uint32_t, enum pdb_value_state)
pdb_set_secret: NTSTATUS (const char *, DATA_BLOB *, DATA_BLOB *, struct security_descriptor *)
pdb_set_trusted_domain: NTSTATUS (const char *, const struct pdb_trusted_domain *)
pdb_set_trusteddom_pw: bool (const char *, const char *, const struct dom_sid *)
pdb_set_unix_primary_group: NTSTATUS (TALLOC_CTX *, struct samu *)
pdb_set_unknown_6: bool (struct samu *, uint32_t, enum pdb_value_state)
pdb_set_upn_suffixes: NTSTATUS (uint32_t, const char **)
pdb_set_user_sid: bool (struct samu *, const struct dom_sid *, enum pdb_value_state)
pdb_set_user_sid_from_rid: bool (struct samu *, uint32_t, enum pdb_value_state)
pdb_set_user_sid_from_string: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_username: bool (struct samu *, const char *, enum pdb_value_state)
pdb_set_workstations: bool (struct samu *, const char *, enum pdb_value_state)
pdb_sethexhours: void (char *, const unsigned char *)
pdb_sethexpwd: void (char *, const unsigned char *, uint32_t)
pdb_sid_to_id: bool (const struct dom_sid *, struct unixid *)
pdb_sid_to_id_unix_users_and_groups: bool (const struct dom_sid *, struct unixid *)
pdb_update_autolock_flag: bool (struct samu *, bool *)
pdb_update_bad_password_count: bool (struct samu *, bool *)
pdb_update_group_mapping_entry: NTSTATUS (GROUP_MAP *)
pdb_update_history: bool (struct samu *, const uint8_t *)
pdb_update_login_attempts: NTSTATUS (struct samu *, bool)
pdb_update_sam_account: NTSTATUS (struct samu *)
pfh_child_allowed_to_accept: bool (struct pf_worker_data *)
pfh_client_terminated: void (struct pf_worker_data *)
pfh_daemon_config: void (const char *, struct pf_daemon_config *, struct pf_daemon_config *)
pfh_manage_pool: void (struct tevent_context *, struct messaging_context *, struct pf_daemon_config *, struct prefork_pool *)
pid_to_procid: struct server_id (pid_t)
poll_intr_one_fd: int (int, int, int, int *)
poll_one_fd: int (int, int, int, int *)
posix_default_lock_was_set: $1113 = false
prefork_add_children: int (struct tevent_context *, struct messaging_context *, struct prefork_pool *, int)
prefork_count_allowed_connections: int (struct prefork_pool *)
prefork_count_children: int (struct prefork_pool *, int *)
prefork_create_pool: bool (TALLOC_CTX *, struct tevent_context *, struct messaging_context *, int, int *, int, int, prefork_main_fn_t *, void *, struct prefork_pool **)
prefork_decrease_allowed_clients: void (struct prefork_pool *)
prefork_expand_pool: int (struct prefork_pool *, int)
prefork_increase_allowed_clients: void (struct prefork_pool *, int)
prefork_listen_recv: int (struct tevent_req *, TALLOC_CTX *, int *, struct tsocket_address **, struct tsocket_address **)
prefork_listen_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct pf_worker_data *, int, int *)
prefork_reset_allowed_clients: void (struct prefork_pool *)
prefork_retire_children: int (struct messaging_context *, struct prefork_pool *, int, time_t)
prefork_send_signal_to_all: void (struct prefork_pool *, int)
prefork_set_sigchld_callback: void (struct prefork_pool *, prefork_sigchld_fn_t *, void *)
prefork_warn_active_children: void (struct messaging_context *, struct prefork_pool *)
privilege_create_account: NTSTATUS (const struct dom_sid *)
privilege_delete_account: NTSTATUS (const struct dom_sid *)
privilege_enum_sids: NTSTATUS (enum sec_privilege, TALLOC_CTX *, struct dom_sid **, int *)
privilege_enumerate_accounts: NTSTATUS (struct dom_sid **, int *)
process_exists: bool (const struct server_id)
process_registry_service: bool (const char *)
process_registry_shares: bool (void)
procid_is_local: bool (const struct server_id *)
procid_to_pid: pid_t (const struct server_id *)
procid_valid: bool (const struct server_id *)
put_long_date: void (char *, time_t)
put_long_date_timespec: void (enum timestamp_set_resolution, char *, struct timespec)
ra_lanman_string: void (const char *)
read_data_ntstatus: NTSTATUS (int, char *, size_t)
read_ea_list_entry: struct ea_list *(TALLOC_CTX *, const char *, size_t, size_t *)
read_fd_with_timeout: NTSTATUS (int, char *, size_t, size_t, unsigned int, size_t *)
read_nttrans_ea_list: struct ea_list *(TALLOC_CTX *, const char *, size_t)
read_smb_length_return_keepalive: NTSTATUS (int, char *, unsigned int, size_t *)
read_udp_v4_socket: ssize_t (int, char *, size_t, struct __kernel_sockaddr_storage *)
readdirname: const char *(DIR *)
realloc_string_sub: char *(char *, const char *, const char *)
realloc_string_sub2: char *(char *, const char *, const char *, bool, bool)
receive_smb_raw: NTSTATUS (int, char *, size_t, unsigned int, size_t, size_t *)
reg_create_path: WERROR (TALLOC_CTX *, const char *, uint32_t, const struct security_token *, enum winreg_CreateAction *, struct registry_key **)
reg_createkey: WERROR (TALLOC_CTX *, struct registry_key *, const char *, uint32_t, struct registry_key **, enum winreg_CreateAction *)
reg_delete_path: WERROR (const struct security_token *, const char *)
reg_deleteallvalues: WERROR (struct registry_key *)
reg_deletekey: WERROR (struct registry_key *, const char *)
reg_deletekey_recursive: WERROR (struct registry_key *, const char *)
reg_deletesubkeys_recursive: WERROR (struct registry_key *, const char *)
reg_deletevalue: WERROR (struct registry_key *, const char *)
reg_enumkey: WERROR (TALLOC_CTX *, struct registry_key *, uint32_t, char **, NTTIME *)
reg_enumvalue: WERROR (TALLOC_CTX *, struct registry_key *, uint32_t, char **, struct registry_value **)
reg_getkeysecurity: WERROR (TALLOC_CTX *, struct registry_key *, struct security_descriptor **)
reg_getversion: WERROR (uint32_t *)
reg_open_path: WERROR (TALLOC_CTX *, const char *, uint32_t, const struct security_token *, struct registry_key **)
reg_openhive: WERROR (TALLOC_CTX *, const char *, uint32_t, const struct security_token *, struct registry_key **)
reg_openkey: WERROR (TALLOC_CTX *, struct registry_key *, const char *, uint32_t, struct registry_key **)
reg_queryinfokey: WERROR (struct registry_key *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, NTTIME *)
reg_querymultiplevalues: WERROR (TALLOC_CTX *, struct registry_key *, uint32_t, const char **, uint32_t *, struct registry_value **)
reg_queryvalue: WERROR (TALLOC_CTX *, struct registry_key *, const char *, struct registry_value **)
reg_remaining_path: char *(TALLOC_CTX *, const char *)
reg_setkeysecurity: WERROR (struct registry_key *, struct security_descriptor *)
reg_setvalue: WERROR (struct registry_key *, const char *, const struct registry_value *)
reg_split_key: bool (char *, char **, char **)
reg_split_path: bool (char *, char **, char **)
reg_subkeys_need_update: bool (struct registry_key_handle *, struct regsubkey_ctr *)
reg_values_need_update: bool (struct registry_key_handle *, struct regval_ctr *)
regdb_close: int (void)
regdb_get_seqnum: int (void)
regdb_init: WERROR (void)
regdb_open: WERROR (void)
regdb_ops: fetch_subkeys = 0xXXXX <regdb_fetch_keys>, fetch_values = 0xXXXX <regdb_fetch_values>, store_subkeys = 0xXXXX <regdb_store_keys>, create_subkey = 0xXXXX <regdb_create_subkey>, delete_subkey = 0xXXXX <regdb_delete_subkey>, store_values = 0xXXXX <regdb_store_values>, reg_access_check = 0xXXXX, get_secdesc = 0xXXXX <regdb_get_secdesc>, set_secdesc = 0xXXXX <regdb_set_secdesc>, subkeys_need_update = 0xXXXX <regdb_subkeys_need_update>, values_need_update = 0xXXXX <regdb_values_need_update>
regdb_transaction_cancel: WERROR (void)
regdb_transaction_commit: WERROR (void)
regdb_transaction_start: WERROR (void)
reghook_cache_add: WERROR (const char *, struct registry_ops *)
reghook_cache_find: struct registry_ops *(const char *)
reghook_cache_init: WERROR (void)
reghook_dump_cache: void (int)
register_dmalloc_msgs: void (struct messaging_context *)
register_msg_pool_usage: void (struct messaging_context *)
register_with_ctdbd: int (struct ctdbd_connection *, uint64_t, int (*)(uint32_t, uint32_t, uint64_t, const uint8_t *, size_t, void *), void *)
registry_create_admin_token: NTSTATUS (TALLOC_CTX *, struct security_token **)
registry_init_basic: WERROR (void)
registry_init_common: WERROR (void)
registry_init_smbconf: WERROR (const char *)
registry_value_cmp: int (const struct registry_value *, const struct registry_value *)
registry_value_dw: struct registry_value *(TALLOC_CTX *, uint32_t)
registry_value_multi_sz: struct registry_value *(TALLOC_CTX *, const char **)
registry_value_sz: struct registry_value *(TALLOC_CTX *, const char *)
regkey_access_check: bool (struct registry_key_handle *, uint32_t, uint32_t *, const struct security_token *)
regkey_get_secdesc: WERROR (TALLOC_CTX *, struct registry_key_handle *, struct security_descriptor **)
regkey_set_secdesc: WERROR (struct registry_key_handle *, struct security_descriptor *)
regsubkey_ctr_addkey: WERROR (struct regsubkey_ctr *, const char *)
regsubkey_ctr_delkey: WERROR (struct regsubkey_ctr *, const char *)
regsubkey_ctr_get_seqnum: int (struct regsubkey_ctr *)
regsubkey_ctr_init: WERROR (TALLOC_CTX *, struct regsubkey_ctr **)
regsubkey_ctr_key_exists: bool (struct regsubkey_ctr *, const char *)
regsubkey_ctr_numkeys: int (struct regsubkey_ctr *)
regsubkey_ctr_reinit: WERROR (struct regsubkey_ctr *)
regsubkey_ctr_set_seqnum: WERROR (struct regsubkey_ctr *, int)
regsubkey_ctr_specific_key: char *(struct regsubkey_ctr *, uint32_t)
regval_compose: struct regval_blob *(TALLOC_CTX *, const char *, uint32_t, const uint8_t *, size_t)
regval_ctr_addvalue: int (struct regval_ctr *, const char *, uint32_t, const uint8_t *, size_t)
regval_ctr_addvalue_multi_sz: int (struct regval_ctr *, const char *, const char **)
regval_ctr_addvalue_sz: int (struct regval_ctr *, const char *, const char *)
regval_ctr_copyvalue: int (struct regval_ctr *, struct regval_blob *)
regval_ctr_delvalue: int (struct regval_ctr *, const char *)
regval_ctr_get_seqnum: int (struct regval_ctr *)
regval_ctr_getvalue: struct regval_blob *(struct regval_ctr *, const char *)
regval_ctr_init: WERROR (TALLOC_CTX *, struct regval_ctr **)
regval_ctr_numvals: int (struct regval_ctr *)
regval_ctr_set_seqnum: WERROR (struct regval_ctr *, int)
regval_ctr_specific_value: struct regval_blob *(struct regval_ctr *, uint32_t)
regval_ctr_value_byname: struct regval_blob *(struct regval_ctr *, const char *)
regval_ctr_value_exists: bool (struct regval_ctr *, const char *)
regval_data_p: uint8_t *(struct regval_blob *)
regval_name: char *(struct regval_blob *)
regval_size: uint32_t (struct regval_blob *)
regval_type: uint32_t (struct regval_blob *)
reinit_after_fork: NTSTATUS (struct messaging_context *, struct tevent_context *, bool, const char *)
remote_arch_cache_delete: bool (const struct GUID *)
remote_arch_cache_update: bool (const struct GUID *)
remote_proto: $1232 = "UNKNOWN", '\000' <repeats 248 times>
reopen_logs: bool (void)
rep_swab: void (const void *, void *, ssize_t)
reset_global_sam_sid: void (void)
revoke_all_privileges: bool (const struct dom_sid *)
revoke_privilege_by_name: bool (const struct dom_sid *, const char *)
revoke_privilege_set: bool (const struct dom_sid *, struct lsa_PrivilegeSet *)
round_timespec: void (enum timestamp_set_resolution, struct timespec *)
samba_version_string: const char *(void)
samu_alloc_rid_unix: NTSTATUS (struct pdb_methods *, struct samu *, const struct passwd *)
samu_new: struct samu *(TALLOC_CTX *)
samu_set_unix: NTSTATUS (struct samu *, const struct passwd *)
sbcErrorString: const char *(sbcErr)
secrets_clear_domain_protection: bool (const char *)
secrets_db_ctx: struct db_context *(void)
secrets_delete: bool (const char *)
secrets_delete_domain_sid: bool (const char *)
secrets_delete_machine_password_ex: bool (const char *)
secrets_fetch: void *(const char *, size_t *)
secrets_fetch_afs_key: bool (const char *, struct afs_key *)
secrets_fetch_domain_guid: bool (const char *, struct GUID *)
secrets_fetch_domain_sid: bool (const char *, struct dom_sid *)
secrets_fetch_generic: char *(const char *, const char *)
secrets_fetch_ipc_userpass: void (char **, char **, char **)
secrets_fetch_machine_password: char *(const char *, time_t *, enum netr_SchannelType *)
secrets_fetch_pass_last_set_time: time_t (const char *)
secrets_fetch_prev_machine_password: char *(const char *)
secrets_fetch_trust_account_password: bool (const char *, uint8_t *, time_t *, enum netr_SchannelType *)
secrets_fetch_trust_account_password_legacy: bool (const char *, uint8_t *, time_t *, enum netr_SchannelType *)
secrets_fetch_trusted_domain_password: bool (const char *, char **, struct dom_sid *, time_t *)
secrets_init: bool (void)
secrets_init_path: bool (const char *)
secrets_mark_domain_protected: bool (const char *)
secrets_shutdown: void (void)
secrets_store: bool (const char *, const void *, size_t)
secrets_store_afs_keyfile: bool (const char *, const struct afs_keyfile *)
secrets_store_domain_guid: bool (const char *, struct GUID *)
secrets_store_domain_sid: bool (const char *, const struct dom_sid *)
secrets_store_generic: bool (const char *, const char *, const char *)
secrets_store_ldap_pw: bool (const char *, char *)
secrets_store_machine_password: bool (const char *, const char *, enum netr_SchannelType)
secrets_store_machine_pw_sync: bool (const char *, const char *, const char *, const char *, const char *, uint32_t, const struct dom_sid *, uint32_t, uint32_t, bool)
secrets_store_trusted_domain_password: bool (const char *, const char *, const struct dom_sid *)
secrets_trusted_domains: NTSTATUS (TALLOC_CTX *, uint32_t *, struct trustdom_info ***)
seekdir: void (DIR *, long)
send_keepalive: bool (int)
server_event_context: struct tevent_context *(void)
server_event_context_free: void (void)
server_event_ctx: $1280 = (struct tevent_context *) 0xXXXX
server_id_db_set_exclusive: int (struct server_id_db *, const char *)
server_id_watch_recv: int (struct tevent_req *, struct server_id *)
server_id_watch_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct messaging_context *, struct server_id)
server_messaging_context: struct messaging_context *(void)
server_messaging_context_free: void (void)
server_msg_ctx: $1292 = (struct messaging_context *) 0xXXXX
serverid_deregister: bool (struct server_id)
serverid_exists: bool (const struct server_id *)
serverid_parent_init: bool (TALLOC_CTX *)
serverid_register: bool (const struct server_id, uint32_t)
serverid_traverse: bool (int (*)(struct db_record *, const struct server_id *, uint32_t, void *), void *)
serverid_traverse_read: bool (int (*)(const struct server_id *, uint32_t, void *), void *)
set_Protocol: void (enum protocol_types)
set_current_user_info: void (const char *, const char *, const char *)
set_effective_capability: void (enum smbd_capability)
set_iconv: bool (smb_iconv_t *, const char *, const char *)
set_local_machine_name: bool (const char *, bool)
set_maxfiles: int (int)
set_message_bcc: int (char *, int)
set_my_vnn: void (uint32_t)
set_namearray: void (name_compare_entry **, const char *)
set_netbios_aliases: bool (const char **)
set_remote_arch: void (enum remote_arch_types)
set_remote_machine_name: bool (const char *, bool)
set_server_zone_offset: int (time_t)
set_share_security: bool (const char *, struct security_descriptor *)
set_use_sendfile: void (int, bool)
setpwent: int (void)
setup_linklocal_scope_id: void (struct sockaddr *)
share_access_check: bool (const struct security_token *, const char *, uint32_t, uint32_t *)
share_info_db_init: bool (void)
show_msg: void (const char *)
show_parameter_list: void (void)
sid_array_from_info3: NTSTATUS (TALLOC_CTX *, const struct netr_SamInfo3 *, struct dom_sid **, uint32_t *, bool)
sid_binstring_hex_talloc: char *(TALLOC_CTX *, const struct dom_sid *)
sid_check_is_asserted_identity: bool (const struct dom_sid *)
sid_check_is_builtin: bool (const struct dom_sid *)
sid_check_is_for_passdb: bool (const struct dom_sid *)
sid_check_is_in_asserted_identity: bool (const struct dom_sid *)
sid_check_is_in_builtin: bool (const struct dom_sid *)
sid_check_is_in_our_sam: bool (const struct dom_sid *)
sid_check_is_in_unix_groups: bool (const struct dom_sid *)
sid_check_is_in_unix_users: bool (const struct dom_sid *)
sid_check_is_in_wellknown_domain: bool (const struct dom_sid *)
sid_check_is_our_sam: bool (const struct dom_sid *)
sid_check_is_unix_groups: bool (const struct dom_sid *)
sid_check_is_unix_users: bool (const struct dom_sid *)
sid_check_is_wellknown_builtin: bool (const struct dom_sid *)
sid_check_is_wellknown_domain: bool (const struct dom_sid *, const char **)
sid_check_object_is_for_passdb: bool (const struct dom_sid *)
sid_linearize: bool (uint8_t *, size_t, const struct dom_sid *)
sid_string_dbg: char *(const struct dom_sid *)
sid_string_talloc: char *(TALLOC_CTX *, const struct dom_sid *)
sid_string_tos: char *(const struct dom_sid *)
sid_to_fstring: char *(char *, const struct dom_sid *)
sid_to_gid: bool (const struct dom_sid *, gid_t *)
sid_to_uid: bool (const struct dom_sid *, uid_t *)
sids_to_unixids: bool (const struct dom_sid *, uint32_t, struct unixid *)
smb_add_user_group: int (const char *, const char *)
smb_create_group: int (const char *, gid_t *)
smb_delete_group: int (const char *)
smb_delete_user_group: int (const char *, const char *)
smb_dos_err_class: const char *(uint8_t)
smb_dos_err_name: const char *(uint8_t, uint16_t)
smb_nscd_flush_group_cache: void (void)
smb_nscd_flush_user_cache: void (void)
smb_panic_s3: void (const char *)
smb_register_passdb: NTSTATUS (int, const char *, pdb_init_function)
smb_set_primary_group: int (const char *, const char *)
smb_xmalloc_array: void *(size_t, unsigned int)
smb_xvasprintf: int (char **, const char *, va_list)
smbconf_add_string_to_array: sbcErr (TALLOC_CTX *, char ***, uint32_t, const char *)
smbconf_backend_requires_messaging: bool (struct smbconf_ctx *)
smbconf_changed: bool (struct smbconf_ctx *, struct smbconf_csn *, const char *, const char *)
smbconf_create_set_share: sbcErr (struct smbconf_ctx *, struct smbconf_service *)
smbconf_create_share: sbcErr (struct smbconf_ctx *, const char *)
smbconf_delete_global_includes: sbcErr (struct smbconf_ctx *)
smbconf_delete_global_parameter: sbcErr (struct smbconf_ctx *, const char *)
smbconf_delete_includes: sbcErr (struct smbconf_ctx *, const char *)
smbconf_delete_parameter: sbcErr (struct smbconf_ctx *, const char *, const char *)
smbconf_delete_share: sbcErr (struct smbconf_ctx *, const char *)
smbconf_drop: sbcErr (struct smbconf_ctx *)
smbconf_find_in_array: bool (const char *, char **, uint32_t, uint32_t *)
smbconf_get_config: sbcErr (struct smbconf_ctx *, TALLOC_CTX *, uint32_t *, struct smbconf_service ***)
smbconf_get_global_includes: sbcErr (struct smbconf_ctx *, TALLOC_CTX *, uint32_t *, char ***)
smbconf_get_global_parameter: sbcErr (struct smbconf_ctx *, TALLOC_CTX *, const char *, char **)
smbconf_get_includes: sbcErr (struct smbconf_ctx *, TALLOC_CTX *, const char *, uint32_t *, char ***)
smbconf_get_parameter: sbcErr (struct smbconf_ctx *, TALLOC_CTX *, const char *, const char *, char **)
smbconf_get_share: sbcErr (struct smbconf_ctx *, TALLOC_CTX *, const char *, struct smbconf_service **)
smbconf_get_share_names: sbcErr (struct smbconf_ctx *, TALLOC_CTX *, uint32_t *, char ***)
smbconf_init: sbcErr (TALLOC_CTX *, struct smbconf_ctx **, const char *)
smbconf_init_internal: sbcErr (TALLOC_CTX *, struct smbconf_ctx **, const char *, struct smbconf_ops *)
smbconf_init_reg: sbcErr (TALLOC_CTX *, struct smbconf_ctx **, const char *)
smbconf_init_txt: sbcErr (TALLOC_CTX *, struct smbconf_ctx **, const char *)
smbconf_is_writeable: bool (struct smbconf_ctx *)
smbconf_ops_reg: init = 0xXXXX <smbconf_reg_init>, shutdown = 0xXXXX <smbconf_reg_shutdown>, requires_messaging = 0xXXXX <smbconf_reg_requires_messaging>, is_writeable = 0xXXXX <smbconf_reg_is_writeable>, open_conf = 0xXXXX <smbconf_reg_open>, close_conf = 0xXXXX <smbconf_reg_close>, get_csn = 0xXXXX <smbconf_reg_get_csn>, drop = 0xXXXX <smbconf_reg_drop>, get_share_names = 0xXXXX <smbconf_reg_get_share_names>, share_exists = 0xXXXX <smbconf_reg_share_exists>, create_share = 0xXXXX <smbconf_reg_create_share>, get_share = 0xXXXX <smbconf_reg_get_share>, delete_share = 0xXXXX <smbconf_reg_delete_share>, set_parameter = 0xXXXX <smbconf_reg_set_parameter>, get_parameter = 0xXXXX <smbconf_reg_get_parameter>, delete_parameter = 0xXXXX <smbconf_reg_delete_parameter>, get_includes = 0xXXXX <smbconf_reg_get_includes>, set_includes = 0xXXXX <smbconf_reg_set_includes>, delete_includes = 0xXXXX <smbconf_reg_delete_includes>, transaction_start = 0xXXXX <smbconf_reg_transaction_start>, transaction_commit = 0xXXXX <smbconf_reg_transaction_commit>, transaction_cancel = 0xXXXX <smbconf_reg_transaction_cancel>
smbconf_reg_ops: fetch_subkeys = 0xXXXX <smbconf_fetch_keys>, fetch_values = 0xXXXX <smbconf_fetch_values>, store_subkeys = 0xXXXX <smbconf_store_keys>, create_subkey = 0xXXXX <smbconf_create_subkey>, delete_subkey = 0xXXXX <smbconf_delete_subkey>, store_values = 0xXXXX <smbconf_store_values>, reg_access_check = 0xXXXX <smbconf_reg_access_check>, get_secdesc = 0xXXXX <smbconf_get_secdesc>, set_secdesc = 0xXXXX <smbconf_set_secdesc>, subkeys_need_update = 0xXXXX <smbconf_subkeys_need_update>, values_need_update = 0xXXXX <smbconf_values_need_update>
smbconf_reg_parameter_is_valid: bool (const char *)
smbconf_reverse_find_in_array: bool (const char *, char **, uint32_t, uint32_t *)
smbconf_set_global_includes: sbcErr (struct smbconf_ctx *, uint32_t, const char **)
smbconf_set_global_parameter: sbcErr (struct smbconf_ctx *, const char *, const char *)
smbconf_set_includes: sbcErr (struct smbconf_ctx *, const char *, uint32_t, const char **)
smbconf_set_parameter: sbcErr (struct smbconf_ctx *, const char *, const char *, const char *)
smbconf_share_exists: bool (struct smbconf_ctx *, const char *)
smbconf_shutdown: void (struct smbconf_ctx *)
smbconf_transaction_cancel: sbcErr (struct smbconf_ctx *)
smbconf_transaction_commit: sbcErr (struct smbconf_ctx *)
smbconf_transaction_start: sbcErr (struct smbconf_ctx *)
smbrun: int (const char *, int *)
smbrun_no_sanitize: int (const char *, int *)
smbrunsecret: int (const char *, const char *)
sock_exec: int (const char *)
socket_exist: bool (const char *)
split_domain_user: void (TALLOC_CTX *, const char *, char **, char **)
srprs_bom: bool (const char **, const char **, charset_t *)
srprs_char: bool (const char **, char)
srprs_charset: bool (const char **, const char *, cbuf *)
srprs_charsetinv: bool (const char **, const char *, cbuf *)
srprs_eol: bool (const char **, cbuf *)
srprs_eos: bool (const char **)
srprs_hex: bool (const char **, size_t, unsigned int *)
srprs_hive: bool (const char **, const struct hive_info **)
srprs_line: bool (const char **, cbuf *)
srprs_nl: bool (const char **, cbuf *)
srprs_option: bool (const char **, const void *, char **, char **)
srprs_quoted: bool (const char **, cbuf *)
srprs_quoted_string: bool (const char **, cbuf *, bool *)
srprs_skipws: bool (const char **)
srprs_str: bool (const char **, const char *, size_t)
srv_make_unix_date: time_t (const void *)
srv_make_unix_date2: time_t (const void *)
srv_make_unix_date3: time_t (const void *)
srv_put_dos_date: void (char *, int, time_t)
srv_put_dos_date2: void (char *, int, time_t)
srv_put_dos_date3: void (char *, int, time_t)
standard_sub_advanced: void (const char *, const char *, const char *, gid_t, const char *, const char *, char *, size_t)
standard_sub_basic: void (const char *, const char *, char *, size_t)
state_path: char *(const char *)
store_lp_set_cmdline: bool (const char *, const char *)
store_reg_keys: bool (struct registry_key_handle *, struct regsubkey_ctr *)
store_reg_values: bool (struct registry_key_handle *, struct regval_ctr *)
str_checksum: int (const char *)
str_list_sub_basic: bool (char **, const char *, const char *)
strip_hostname: const char *(const char *)
sub_set_smb_name: void (const char *)
sub_set_socket_ids: void (const char *, const char *, const char *)
sys_fallocate: int (int, uint32_t, off_t, off_t)
sys_fcntl_long: int (int, int, long)
sys_fcntl_ptr: int (int, int, void *)
sys_fdopendir: DIR *(int)
sys_fstat: int (int, SMB_STRUCT_STAT *, bool)
sys_getgroups: int (int, gid_t *)
sys_getwd: char *(void)
sys_lstat: int (const char *, SMB_STRUCT_STAT *, bool)
sys_mknod: int (const char *, mode_t, dev_t)
sys_pclose: int (int)
sys_popen: int (const char *)
sys_posix_fallocate: int (int, off_t, off_t)
sys_random: long (void)
sys_realpath: char *(const char *)
sys_recvfile: ssize_t (int, int, off_t, size_t)
sys_recvfrom: ssize_t (int, void *, size_t, int, struct sockaddr *, socklen_t *)
sys_send: ssize_t (int, const void *, size_t, int)
sys_sendfile: ssize_t (int, int, const DATA_BLOB *, off_t, size_t)
sys_setgroups: int (gid_t, int, gid_t *)
sys_srandom: void (unsigned int)
sys_stat: int (const char *, SMB_STRUCT_STAT *, bool)
tab_depth: const char *(int, int)
talloc_dict_fetch: void *(struct talloc_dict *, DATA_BLOB, TALLOC_CTX *)
talloc_dict_init: struct talloc_dict *(TALLOC_CTX *)
talloc_dict_set: bool (struct talloc_dict *, DATA_BLOB, void *)
talloc_dict_traverse: int (struct talloc_dict *, int (*)(DATA_BLOB, void *, void *), void *)
talloc_sub_advanced: char *(TALLOC_CTX *, const char *, const char *, const char *, gid_t, const char *, const char *, const char *)
talloc_sub_basic: char *(TALLOC_CTX *, const char *, const char *, const char *)
talloc_sub_specified: char *(TALLOC_CTX *, const char *, const char *, const char *, const char *, uid_t, gid_t)
tcopy_passwd: struct passwd *(TALLOC_CTX *, const struct passwd *)
tdb_chainlock_with_timeout: int (TDB_CONTEXT *, TDB_DATA, unsigned int)
tdb_data_cmp: int (TDB_DATA, TDB_DATA)
tdb_data_string: char *(TALLOC_CTX *, TDB_DATA)
tdb_lock_bystring_with_timeout: int (TDB_CONTEXT *, const char *, int)
tdb_open_log: struct tdb_context *(const char *, int, int, int, mode_t)
tdb_pack: size_t (uint8_t *, int, const char *, ...)
tdb_pack_append: bool (TALLOC_CTX *, uint8_t **, size_t *, const char *, ...)
tdb_read_lock_bystring_with_timeout: int (TDB_CONTEXT *, const char *, unsigned int)
tdb_trans_delete: int (struct tdb_context *, TDB_DATA)
tdb_trans_store: int (struct tdb_context *, TDB_DATA, TDB_DATA, int)
tdb_trans_store_bystring: int (TDB_CONTEXT *, const char *, TDB_DATA, int)
tdb_unpack: int (const uint8_t *, int, const char *, ...)
telldir: long (DIR *)
tevent_wait_done: void (struct tevent_req *)
tevent_wait_recv: int (struct tevent_req *)
tevent_wait_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *)
time_to_asc: const char *(const time_t)
timeval_to_msec: int (struct timeval)
token_sid_in_ace: bool (const struct security_token *, const struct security_ace *)
transfer_file: off_t (int, int, off_t)
transfer_file_internal: ssize_t (void *, void *, size_t, ssize_t (*)(void *, void *, size_t, off_t), ssize_t (*)(void *, const void *, size_t, off_t))
trusted_domain_password_delete: bool (const char *)
tstream_read_packet_recv: ssize_t (struct tevent_req *, TALLOC_CTX *, uint8_t **, int *)
tstream_read_packet_send: struct tevent_req *(TALLOC_CTX *, struct tevent_context *, struct tstream_context *, size_t, ssize_t (*)(uint8_t *, size_t, void *), void *)
uid_to_sid: void (struct dom_sid *, uid_t)
uid_to_unix_users_sid: void (uid_t, struct dom_sid *)
uidtoname: const char *(uid_t)
uint64s_nt_time_to_unix_abs: time_t (const uint64_t *)
unix_clean_name: char *(TALLOC_CTX *, const char *)
unix_dev_major: uint32_t (dev_t)
unix_dev_minor: uint32_t (dev_t)
unix_groups_domain_name: const char *(void)
unix_to_nt_time_abs: void (NTTIME *, time_t)
unix_users_domain_name: const char *(void)
unix_wild_match: bool (const char *, const char *)
unixid_from_both: void (struct unixid *, uint32_t)
unixid_from_gid: void (struct unixid *, uint32_t)
unixid_from_uid: void (struct unixid *, uint32_t)
update_stat_ex_create_time: void (struct stat_ex *, struct timespec)
update_stat_ex_mtime: void (struct stat_ex *, struct timespec)
valid_share_pathname: char *(TALLOC_CTX *, const char *)
volume_label: const char *(TALLOC_CTX *, int)
wb_is_trusted_domain: wbcErr (const char *)
widelinks_warning: void (int)
winbind_allocate_gid: bool (gid_t *)
winbind_allocate_uid: bool (uid_t *)
winbind_get_groups: bool (TALLOC_CTX *, const char *, uint32_t *, gid_t **)
winbind_get_sid_aliases: bool (TALLOC_CTX *, const struct dom_sid *, const struct dom_sid *, size_t, uint32_t **, size_t *)
winbind_getpwnam: struct passwd *(const char *)
winbind_getpwsid: struct passwd *(const struct dom_sid *)
winbind_gid_to_sid: bool (struct dom_sid *, gid_t)
winbind_lookup_name: bool (const char *, const char *, struct dom_sid *, enum lsa_SidType *)
winbind_lookup_rids: bool (TALLOC_CTX *, const struct dom_sid *, int, uint32_t *, const char **, const char ***, enum lsa_SidType **)
winbind_lookup_sid: bool (TALLOC_CTX *, const struct dom_sid *, const char **, const char **, enum lsa_SidType *)
winbind_lookup_usersids: bool (TALLOC_CTX *, const struct dom_sid *, uint32_t *, struct dom_sid **)
winbind_ping: bool (void)
winbind_sid_to_gid: bool (gid_t *, const struct dom_sid *)
winbind_sid_to_uid: bool (uid_t *, const struct dom_sid *)
winbind_uid_to_sid: bool (struct dom_sid *, uid_t)
wins_server_tag_ips: bool (const char *, TALLOC_CTX *, struct in_addr **, int *)
wins_srv_alive: void (struct in_addr, struct in_addr)
wins_srv_count: unsigned int (void)
wins_srv_count_tag: unsigned int (const char *)
wins_srv_died: void (struct in_addr, struct in_addr)
wins_srv_ip_tag: struct in_addr (const char *, struct in_addr)
wins_srv_is_dead: bool (struct in_addr, struct in_addr)
wins_srv_tags: char **(void)
wins_srv_tags_free: void (char **)
write_bom: int (FILE *, const char *, charset_t)
write_data_at_offset: ssize_t (int, const char *, size_t, off_t)
zero_free: void (void *, size_t)
